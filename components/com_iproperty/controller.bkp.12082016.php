<?php
/**
 * @version 3.3.3 2015-04-30
 * @package Joomla
 * @subpackage Intellectual Property
 * @copyright (C) 2009 - 2015 the Thinkery LLC. All rights reserved.
 * @license GNU/GPL see LICENSE.php
 */

defined('_JEXEC' ) or die('Restricted access');
jimport('joomla.application.component.controller');
jimport('joomla.error.log');

class ipropertyController extends JControllerLegacy
{
    var $log;
    var $debug;

    public function __construct()
    {
        $this->debug = false;
        if($this->debug) $this->log =JLog::getInstance('iproperty.log.php'); // create the logfile TODO: maybe add a debug switch to the admin to turn this off or on
        if($this->debug) $this->log->addEntry(array('COMMENT' => 'Constructing IProperty'));
        
        parent::__construct();       
    }
    
    public function display($cachable = false, $urlparams = false)
	{
		$app            = JFactory::getApplication();
        $document       = JFactory::getDocument();
        $settings       = ipropertyAdmin::config();
        $ipversion      = ipropertyAdmin::_getversion();
        ipropertyHTML::includeIpScripts();
        
        if( $settings->offline == 1 ){
            echo '
                <div align="center" class="ip-offline">
                    '.JHtml::_('image', 'components/com_iproperty/assets/images/iproperty.png', JText::_('COM_IPROPERTY_NO_ACCESS')).'
                    <div>' . $settings->offmessage . '</div>
                </div>';
        }else{
            // make sure bootstrap framework and css is loaded            
            JHtml::_('bootstrap.framework');
            
            if($settings->bootstrap_css){
                $lang = JFactory::getLanguage();
                $lang_direction = $lang->isRTL() ? 'rtl' : 'ltr';
                JHtml::_('bootstrap.loadCss', true, $lang_direction);
            }
            
            // Set predefined 'get' vars from menu item params
            $pdarray = array('cat', 'stype', 'city', 'locstate', 'province', 'county', 'region', 'country', 'beds', 'baths', 'price_low', 'price_high', 'filter_order', 'filter_order_dir', 'filter_order_Dir', 'hoa', 'reo', 'waterfront');
            foreach($pdarray as $pd){
                if($app->getParams()->get($pd) && !$app->input->getInt('ipquicksearch')){
                    $app->input->set($pd, $app->getParams()->get($pd), 'get');
                }
            }
            // end predefined vars           
        
            $cachable       = ($app->input->getInt('ipquicksearch')) ? false : true;
            $editid         = $app->input->getUint('id');
            $vName          = $app->input->getCmd('view', 'home');
            
            // add additional models for manage view
            if ($vName == 'manage')
            {
                $vType       = $document->getType();
                $view        = $this->getView($vName, $vType);

                switch($app->input->get('layout'))
                {
                    case 'proplist':
                        default:                            
                        $model = $this->getModel('proplist', 'ipropertymodel');
                        break;
                    case 'agentlist':
                        $model = $this->getModel('agentlist', 'ipropertymodel');
                        break;
                    case 'companylist':
                        $model = $this->getModel('companylist', 'ipropertymodel');
                        break;
                    case 'openhouselist':
                        $model = $this->getModel('openhouselist', 'ipropertymodel');
                        break;
                }
                $view->setModel($model, true);
            }
            
            $app->input->set('view', $vName);

            $safeurlparams = array('cat'=>'INT','id'=>'INT','cid'=>'ARRAY','limit'=>'INT','limitstart'=>'INT',
                'showall'=>'INT','return'=>'BASE64','search'=>'STRING','filter_order'=>'CMD','filter_order_dir'=>'CMD','filter_order_Dir'=>'CMD',
                'stype'=>'INT','print'=>'BOOLEAN','city'=>'STRING','locstate'=>'INT','province'=>'STRING','county'=>'STRING',
                'region'=>'STRING','country'=>'INT','beds'=>'INT','baths'=>'INT','price_low'=>'INT','price_high'=>'INT','sqft_low'=>'INT','sqft_high'=>'INT',
                'hoa'=>'INT','reo'=>'INT','waterfront'=>'INT','print'=>'BOOLEAN','lang'=>'CMD');

            if ($vName !== 'feed') echo '<!-- Generated by Intellectual Property v'.$ipversion['iproperty'].' by The Thinkery LLC. http://iproperty.thethinkery.net -->';
            parent::display($cachable, $safeurlparams);

            return $this;
        }
	}

    public function fetchfromrets(){
        // https://github.com/troydavisson/PHRETS --- Reference link
        $rets_login_url = 'http://retsgw.flexmls.com:80/rets2_1/Login';
        $rets_username = 'az.rets.usmr01b';
        $rets_password = 'puces-uronic23';

        // set your timezone
        date_default_timezone_set('America/New_York');

        // pull in the packages managed by Composer
        require_once(JPATH_SITE."/rets/vendor/autoload.php");

        // setup your configuration
        $config = new \PHRETS\Configuration;
        $config->setLoginUrl($rets_login_url)
                ->setUsername($rets_username)
                ->setPassword($rets_password)
                ->setRetsVersion('1.7.2');

        // get a session ready using the configuration
        $rets = new \PHRETS\Session($config);

        // make the first request
        $connect = $rets->Login();

        $system = $rets->GetSystemMetadata();
        //echo '<pre>';print_r($system);exit;
        //echo "Server Name: " . $system->getSystemDescription()."<br/><br/>";exit;

        //$results = $rets->Search("Property", "A", "(LIST_87=2010-04-01T00:00:00+)", array('Limit' => 2) );    
        $results = $rets->Search("Property", "A", "(LIST_87=2010-04-01T00:00:00+)", array('Limit' => 25));
        //echo '<pre>';print_r($results);exit;

        $properties = array();
        $keys = $results->getHeaders();
        $labels = array();
        $labels[] = "Assessor's Book #";
        $labels[] = "Assessor's Map #";
        $labels[] = "Approx Lot SqFt";
        $labels[] = "Contact Info: List Agent Cell Phn2";
        $labels[] = "Assessor's Parcel #";
        $labels[] = "Association & Fees: HOA Telephone";
        $labels[] = "Cooling";
        $labels[] = "VOWAddressDisplay";
        $labels[] = "Items Updated: Bath(s) Partial/Full";
        $labels[] = "Association & Fees: Cap Imprv/Impact Fee";
        $labels[] = "ListingOfficePhone";
        $labels[] = "Association & Fees: HOA 3 Telephone";
        $labels[] = "Separate Workshop Length";
        $labels[] = "Guest House SqFt";
        $labels[] = "Other Compensation";
        $labels[] = "CoListingMemberShortId";
        $labels[] = "Picture Count";
        $labels[] = "Picture Timestamp";
        $labels[] = "Source of SqFt";
        $labels[] = "Bedroom 4 Width";
        $labels[] = "Auction";
        $labels[] = "Tax Municipality";
        $labels[] = "Horses";
        $labels[] = "Ownership";
        $labels[] = "Association & Fees: HOA 2 Transfer Fee";
        $labels[] = "Items Updated: Wiring Partial/Full";
        $labels[] = "Fencing";
        $labels[] = "Const - Finish";
        $labels[] = "Timestamp";
        $labels[] = "Assessor Parcel Ltr";
        $labels[] = "Out of Area Schl Dst";
        $labels[] = "Cross Street";
        $labels[] = "CoListingMemberName";
        $labels[] = "Entry Timestamp";
        $labels[] = "Subdivision";
        $labels[] = "Builder Name";
        $labels[] = "Marketing Name";
        $labels[] = "Directions";
        $labels[] = "Legal Info: Cnty Rcrd Bk & Pg #";
        $labels[] = "Assessor Number";
        $labels[] = "Items Updated: Rm Adtn Partial/Full";
        $labels[] = "Spa";
        $labels[] = "Exercise/Sauna Width";
        $labels[] = "Energy/Green Feature";
        $labels[] = "Bedroom 5 Width";
        $labels[] = "Items Updated: Floor Partial/Full";
        $labels[] = "Legal Info: Township";
        $labels[] = "VOWConsumerComment";
        $labels[] = "Office Width";
        $labels[] = "Bedroom 3 Length";
        $labels[] = "Kitchen Length";
        $labels[] = "Dwelling Styles";
        $labels[] = "Bedroom 5 Length";
        $labels[] = "Public Remarks";
        $labels[] = "Master Bedroom Length";
        $labels[] = "Tax Year";
        $labels[] = "Pool";
        $labels[] = "Taxes";
        $labels[] = "Association & Fees: HOA 3 Fee";
        $labels[] = "Association & Fees: HOA Transfer Fee";
        $labels[] = "Source Apx Lot SqFt";
        $labels[] = "Parking Spaces: Carport Spaces";
        $labels[] = "Other Rooms";
        $labels[] = "Kitchen Width";
        $labels[] = "Association & Fees: HOA 2 Paid (Freq)";
        $labels[] = "Association & Fees: Rec Center Fee 2 Y/N";
        $labels[] = "Parking Spaces: Total Covered Spaces";
        $labels[] = "Property Description";
        $labels[] = "Exterior Stories";
        $labels[] = "# Bedrooms";
        $labels[] = "Association Fee Incl";
        $labels[] = "# Bathrooms";
        $labels[] = "# of Interior Levels";
        $labels[] = "Items Updated: Pool Yr Updated";
        $labels[] = "Association & Fees: Rec Center Fee";
        $labels[] = "Other Length";
        $labels[] = "Community Features";
        $labels[] = "Assoc Rules/Info";
        $labels[] = "Energy/Green Feature: HERS Rating Y/N";
        $labels[] = "Association & Fees: HOA Fee";
        $labels[] = "Plumbing";
        $labels[] = "Landscaping";
        $labels[] = "Items Updated: Plmbg Partial/Full";
        $labels[] = "Library Width";
        $labels[] = "Breakfast Room Width";
        $labels[] = "Association & Fees: HOA 2 Fee";
        $labels[] = "Items Updated: Roof Yr Updated";
        $labels[] = "ListingMemberName";
        $labels[] = "VOWEntireListingDisplay";
        $labels[] = "Bedroom 3 Width";
        $labels[] = "Bedroom 2 Width";
        $labels[] = "Green/Energy Cert";
        $labels[] = "Library Length";
        $labels[] = "Energy/Green Feature: HERS Rating";
        $labels[] = "Energy/Green Feature: HERS Cert Date";
        $labels[] = "Miscellaneous";
        $labels[] = "Items Updated: Roof Partial/Full";
        $labels[] = "Building Style";
        $labels[] = "Loft Length";
        $labels[] = "Add'l Property Use";
        $labels[] = "Great Room Width";
        $labels[] = "Association & Fees: HOA 2 Telephone";
        $labels[] = "Windows";
        $labels[] = "Items Updated: Plmbg Yr Updated";
        $labels[] = "Association & Fees: Rec Cent 2 Pd (Freq)";
        $labels[] = "Solar Panels: Ownership";
        $labels[] = "Roofing";
        $labels[] = "Separate Den/Office: Sep Den/Office Y/N";
        $labels[] = "Family Room Width";
        $labels[] = "Association & Fees: Com Facilities Distr";
        $labels[] = "Accessibility Feat.";
        $labels[] = "Heating";
        $labels[] = "Dwelling Type";
        $labels[] = "Association & Fees: HOA Name";
        $labels[] = "Association & Fees: Cap Impv/Impt Fee 2";
        $labels[] = "Association & Fees: HOA 3 Paid (Freq)";
        $labels[] = "Internal Listing ID";
        $labels[] = "Property Type";
        $labels[] = "Property Group ID";
        $labels[] = "Agent ID";
        $labels[] = "Items Updated: Wiring Yr Updated";
        $labels[] = "Family Room Length";
        $labels[] = "Kitchen Features";
        $labels[] = "Association & Fees: PAD Paid (Freq)";
        $labels[] = "Den Length";
        $labels[] = "Items Updated: Kitchen Yr Updated";
        $labels[] = "AZ Room/Lanai Length";
        $labels[] = "Exterior Features";
        $labels[] = "Contact Info: Office Fax Number";
        $labels[] = "Horse Features";
        $labels[] = "Cooling: HVAC SEER Rating";
        $labels[] = "Association & Fees: Land Lease Fee Y/N";
        $labels[] = "Separate Workshop Width";
        $labels[] = "Association & Fees: HOA 3 Y/N";
        $labels[] = "Association & Fees: Land Lease Fee";
        $labels[] = "Association & Fees: Land Lease Pd (Freq)";
        $labels[] = "New Financing";
        $labels[] = "Items Updated: Rm Adtn Yr Updated";
        $labels[] = "Association & Fees: Rec Center Pd (Freq)";
        $labels[] = "ListingMemberShortId";
        $labels[] = "Unit Style";
        $labels[] = "Items Updated: Ht/Cool Partial/Full";
        $labels[] = "UCB or CCBS";
        $labels[] = "Living Room Width";
        $labels[] = "Association & Fees: PAD Fee";
        $labels[] = "Status";
        $labels[] = "Laundry";
        $labels[] = "Bedroom 4 Length";
        $labels[] = "Architecture";
        $labels[] = "Green/Engy Cert Year: Green/Engy Cert Year";
        $labels[] = "Association & Fees: HOA Y/N";
        $labels[] = "Association & Fees: Rec Center Fee 2";
        $labels[] = "Contact Info: List Agent Pager";
        $labels[] = "Association & Fees: Cap Impv/ImptFee2Y/N";
        $labels[] = "Great Room Length";
        $labels[] = "Living Room Length";
        $labels[] = "Parking Spaces: Slab Parking Spaces";
        $labels[] = "Basement: Basement Y/N";
        $labels[] = "Association & Fees: HOA 2 Y/N";
        $labels[] = "Other Width";
        $labels[] = "Legal Info: Range";
        $labels[] = "Master Bedroom";
        $labels[] = "Status Update";
        $labels[] = "Construction Status";
        $labels[] = "Utilities";
        $labels[] = "Bonus/Game Room Length";
        $labels[] = "Master Bedroom Width";
        $labels[] = "UnBranded Virtual Tour";
        $labels[] = "VOWAutomatedValuationDisplay";
        $labels[] = "Association & Fees: HOA 3 Name";
        $labels[] = "Items Updated: Floor Yr Updated";
        $labels[] = "Approx SQFT";
        $labels[] = "Mfg Home Features";
        $labels[] = "Geo Lon";
        $labels[] = "Geo Lat";
        $labels[] = "Zip Code";
        $labels[] = "Special Listing Cond";
        $labels[] = "Media Room Length";
        $labels[] = "Services";
        $labels[] = "Association & Fees: Cap Impv/Impt Fee$/%";
        $labels[] = "Construction";
        $labels[] = "Media Room Width";
        $labels[] = "Flooring";
        $labels[] = "Items Updated: Kitchen Partial/Full";
        $labels[] = "Solar Panels: kW";
        $labels[] = "Items Updated: Ht/Cool Yr Updated";
        $labels[] = "Loft Width";
        $labels[] = "Year Built";
        $labels[] = "Association & Fees: Cap Impv/Impt FeeY/N";
        $labels[] = "Bedrooms Plus";
        $labels[] = "Association & Fees: HOA 2 Name";
        $labels[] = "Features";
        $labels[] = "Subagents";
        $labels[] = "Buyer/Broker";
        $labels[] = "Buyer Broker $/%";
        $labels[] = "Technology";
        $labels[] = "Apx Lot Size Range";
        $labels[] = "Architect: Architect";
        $labels[] = "Bonus/Game Room Width";
        $labels[] = "Legal Info: Lot Number";
        $labels[] = "Parking Features";
        $labels[] = "Association & Fees: Ttl Mthly Fee Equiv";
        $labels[] = "Office Length";
        $labels[] = "Items Updated: Pool Partial/Full";
        $labels[] = "Association & Fees: Rec Center Fee Y/N";
        $labels[] = "Variable Commission";
        $labels[] = "Dining Area";
        $labels[] = "Master Bathroom";
        $labels[] = "List Price";
        $labels[] = "Price/SqFt";
        $labels[] = "Additional Bedroom";
        $labels[] = "Den Width";
        $labels[] = "Bedroom 2 Length";
        $labels[] = "Map Code/Grid";
        $labels[] = "Sewer";
        $labels[] = "Association & Fees: Cap Impv/ImptFee2$/%";
        $labels[] = "Jr. High School";
        $labels[] = "Elementary School";
        $labels[] = "Pool - Private";
        $labels[] = "Water";
        $labels[] = "Listing ID";
        $labels[] = "Type";
        $labels[] = "Dining Room Length";
        $labels[] = "AZ Room/Lanai Width";
        $labels[] = "Office ID";
        $labels[] = "Basement Description";
        $labels[] = "Planned Comm Name";
        $labels[] = "House Number";
        $labels[] = "Contact Info: List Agent Cell Phn";
        $labels[] = "Association & Fees: HOA Paid (Freq)";
        $labels[] = "Compass";
        $labels[] = "Breakfast Room Length";
        $labels[] = "High School";
        $labels[] = "Bldg Number";
        $labels[] = "Association & Fees: PAD Fee Y/N";
        $labels[] = "Unit #";
        $labels[] = "Street Name";
        $labels[] = "St Suffix";
        $labels[] = "St Dir Sfx";
        $labels[] = "Exercise/Sauna Length";
        $labels[] = "ListingOfficeShortId";
        $labels[] = "Fireplace";
        $labels[] = "City/Town Code";
        $labels[] = "Sub Agent $/%";
        $labels[] = "Items Updated: Bath(s) Yr Updated";
        $labels[] = "ListingOfficeName";
        $labels[] = "Dining Room Width";
        $labels[] = "Legal Info: Section";
        $labels[] = "Comp to Buyer Broker";
        $labels[] = "Comp to Subagent";
        $labels[] = "Week Avail Timeshare";
        $labels[] = "Solar Panels: Grid";
        $labels[] = "Association & Fees: HOA 3 Transfer Fee";
        $labels[] = "Zip4";
        $labels[] = "Parking Spaces: Garage Spaces";
        $labels[] = "Approx SqFt Range";
        $labels[] = "State/Province";
        $labels[] = "Model";
        $labels[] = "High School Dist #";
        $labels[] = "County Code";
        $labels[] = "Country";
        $labels[] = "Elem School Dist #";
        $count = 0;

        $db = JFactory::getDbo(); 

        $this->deleteRetsRecords();
        
        foreach ($results as $record) {

            $proamenities = array();

            //echo "<table border='1'>";
            for ($i=0; $i < count($keys); $i++) { 
                //echo "<tr><th align='left'>".$keys[$i]."</th><td>".$labels[$i]."</td><td>".$record[$keys[$i]]."</td></tr>";
                if($keys[$i] == "LIST_39") { if(!empty($record[$keys[$i]])) { $city = $record[$keys[$i]]; } else { $city = ''; } }
                if($keys[$i] == "LIST_67") { if(!empty($record[$keys[$i]])) { $baths = $record[$keys[$i]]; } else { $baths = ''; } } 
                if($keys[$i] == "LIST_66") { if(!empty($record[$keys[$i]])) { $beds = $record[$keys[$i]]; } else { $beds = ''; } }
                if($keys[$i] == "LIST_53") { if(!empty($record[$keys[$i]])) { $yearbuilt = $record[$keys[$i]]; } else { $yearbuilt = ''; } }
                if($keys[$i] == "LIST_47") { if(!empty($record[$keys[$i]])) { $longitude = $record[$keys[$i]]; } else { $longitude = ''; } }
                if($keys[$i] == "LIST_46") { if(!empty($record[$keys[$i]])) { $latitude = $record[$keys[$i]]; } else { $latitude = ''; } }
                if($keys[$i] == "LIST_43") { if(!empty($record[$keys[$i]])) { $postcode = $record[$keys[$i]]; } else { $postcode = ''; } }
                if($keys[$i] == "LIST_37") { if(!empty($record[$keys[$i]])) { $street2 = $record[$keys[$i]]; } else { $street2 = ''; } }
                if($keys[$i] == "LIST_34") { if(!empty($record[$keys[$i]])) { $street = $record[$keys[$i]]; } else { $street = ''; } }
                if($keys[$i] == "LIST_31") { if(!empty($record[$keys[$i]])) { $street_num = $record[$keys[$i]]; } else { $street_num = ''; } }
                if($keys[$i] == "LIST_25") { if(!empty($record[$keys[$i]])) { $price = $record[$keys[$i]]; } else { $price = ''; } }
                if($keys[$i] == "LIST_22") { if(!empty($record[$keys[$i]])) { $price2 = $record[$keys[$i]]; } else { $price2 = ''; } }
                if($keys[$i] == "GF20070914134222636466000000") { if(!empty($record[$keys[$i]])) { $description = $record[$keys[$i]]; } else { $description = ''; } }

                if($keys[$i] == "LIST_105") { if(!empty($record[$keys[$i]])) { $mls_id = $record[$keys[$i]]; } else { $mls_id = ''; } }
                if($keys[$i] == "LIST_131") { if(!empty($record[$keys[$i]])) { $subdivision = $record[$keys[$i]]; } else { $subdivision = ''; } }
                if($keys[$i] == "LIST_113") { if(!empty($record[$keys[$i]])) { $province = $record[$keys[$i]]; } else { $province = ''; } }
                if($keys[$i] == "LIST_41") { if(!empty($record[$keys[$i]])) { $county = $record[$keys[$i]]; } else { $county = ''; } }
                if($keys[$i] == "LIST_35") { if(!empty($record[$keys[$i]])) { $total_units = $record[$keys[$i]]; } else { $total_units = ''; } }
                if($keys[$i] == "LIST_75") { if(!empty($record[$keys[$i]])) { $tax = $record[$keys[$i]]; } else { $tax = ''; } }
                if($keys[$i] == "LIST_48") { if(!empty($record[$keys[$i]])) { $sqft = $record[$keys[$i]]; } else { $sqft = ''; } }
                if($keys[$i] == "LIST_114") { if(!empty($record[$keys[$i]])) { $lotsize = $record[$keys[$i]]; } else { $lotsize = ''; } }
                if($keys[$i] == "GF20070914134031105159000000") { if(!empty($record[$keys[$i]])) { $heat = $record[$keys[$i]]; } else { $heat = ''; } }
                if($keys[$i] == "GF20070914134018021136000000") { if(!empty($record[$keys[$i]])) { $cool = $record[$keys[$i]]; } else { $cool = ''; } }
                if($keys[$i] == "FEAT20110510163155967817000000") { if(!empty($record[$keys[$i]])) { $garage_size = $record[$keys[$i]]; } else { $garage_size = ''; } }
                if($keys[$i] == "GF20070914134004605295000000") { if(!empty($record[$keys[$i]])) { $roof = $record[$keys[$i]]; } else { $roof = ''; } }
                if($keys[$i] == "LIST_112") { if(!empty($record[$keys[$i]])) { $school_district = $record[$keys[$i]]; } else { $school_district = ''; } }   

                // amenities
                if($keys[$i] == "GF20070914134205261619000000") { if(!empty($record[$keys[$i]])) { array_push($proamenities, 25); } }
                if($keys[$i] == "FEAT20110510163155967817000000") { if(!empty($record[$keys[$i]])) { array_push($proamenities, 4); } }
                if($keys[$i] == "GF20070913202500135759000000") { if(!empty($record[$keys[$i]])) { array_push($proamenities, 5); } }
                if($keys[$i] == "GF20070913202500135494000000") { if(!empty($record[$keys[$i]])) { array_push($proamenities, 34); } }
                if($keys[$i] == "GF20070913202500135727000000") { if(!empty($record[$keys[$i]])) { array_push($proamenities, 3); } }
                if($keys[$i] == "GF20100909235843952771000000") { if(!empty($record[$keys[$i]])) { array_push($proamenities, 23); } }
                if($keys[$i] == "GF20070914134031105159000000") { if(!empty($record[$keys[$i]])) { array_push($proamenities, 84); } }
                if($keys[$i] == "GF20070914134018021136000000") { if(!empty($record[$keys[$i]])) { array_push($proamenities, 37); } }
                if($keys[$i] == "GF20070913202500135598000000") { if(!empty($record[$keys[$i]])) { array_push($proamenities, 87); } }
                
                if($keys[$i] == 'LIST_1') { if(!empty($record[$keys[$i]])) { $photos = $rets->GetObject("Property", "640x480", $record[$keys[$i]], "*", 1); /*echo '<pre>';print_r($photos);echo '</pre>';*/ } else { $photos = ''; } }
                //echo '<pre>';print_r($photos);echo '</pre>';
            }

            // Insert columns.
            $columns = array('stype', 'country', 'locstate', 'city', 'baths', 'beds', 'yearbuilt', 'longitude', 'latitude', 'postcode', 'street2', 'street', 'street_num', 'stype_freq', 'price', 'price2', 'access', 'from_rets', 'description', 'mls_id', 'subdivision', 'province', 'county', 'total_units', 'tax', 'sqft', 'lotsize', 'heat', 'cool', 'garage_size', 'roof', 'school_district', 'created_by', 'created', 'modified', 'publish_up');
             
            // Insert values.
            $values = array(1, 194, 3, $db->quote($city), $db->quote($baths), $db->quote($beds), $db->quote($yearbuilt), $db->quote($longitude), $db->quote($latitude), $db->quote($postcode), $db->quote($street2), $db->quote($street), $db->quote($street_num), $db->quote('SqFt'), $db->quote($price), $db->quote($price2),1, 1, $db->quote($description), $db->quote($mls_id), $db->quote($subdivision), $db->quote($province), $db->quote($county), $db->quote($total_units), $db->quote($tax), $db->quote($sqft), $db->quote($lotsize), $db->quote($heat), $db->quote($cool), $db->quote($garage_size), $db->quote($roof), $db->quote($school_district), 785, 'NOW()', 'NOW()', 'NOW()');
            //print_r($values);exit;
            // Prepare the insert query.
            $query = $db->getQuery(true);
            $query
                ->insert($db->quoteName('#__iproperty'))
                ->columns($db->quoteName($columns))
                ->values(implode(',', $values));
             
            // Set the query using our newly populated query object and execute it.
            $db->setQuery($query);
            $db->execute();
            $propId = $db->insertid();

            if(count($proamenities) > 0){

                foreach ($proamenities as $pro) {
                    
                    $midquery = $db->getQuery(true);
                    $midcolumns = array('prop_id' , 'cat_id' , 'amen_id');
                    $midvalues = array($db->quote($propId), 1, $db->quote($pro));
                    $midquery
                        ->insert($db->quoteName('#__iproperty_propmid'))
                        ->columns($db->quoteName($midcolumns))
                        ->values(implode(',', $midvalues));
                    // Set the query using our newly populated query object and execute it.
                    $db->setQuery($midquery);
                    $db->execute();
                }

            } else {
                $midquery = $db->getQuery(true);
                $midcolumns = array('prop_id' , 'cat_id' , 'amen_id');
                $midvalues = array($db->quote($propId), 1, 0);
                $midquery
                    ->insert($db->quoteName('#__iproperty_propmid'))
                    ->columns($db->quoteName($midcolumns))
                    ->values(implode(',', $midvalues));
                // Set the query using our newly populated query object and execute it.
                $db->setQuery($midquery);
                $db->execute();
            }
            //custom viral
            $super = $db->getQuery(true);
            $super->select('id');
            $super->from('`#__user_usergroup_map` AS `map`');
            $super->join('inner', '`#__iproperty_agents` AS `ag` ON `map`.`user_id` = `ag`.`user_id`');
            $super->where('`map`.`group_id` = 8');
            $super->where('`ag`.`agent_type` = 1');
            $db->setQuery($super);
            $res = $db->loadObject();
            if(count($proamenities) > 0){
                    $agquery = $db->getQuery(true);
                    $agcolumns = array('prop_id' , 'agent_id' , 'agent_type');
                    $agvalues = array($db->quote($propId), $res->id, 1);
                    $agquery
                        ->insert($db->quoteName('#__iproperty_agentmid'))
                        ->columns($db->quoteName($agcolumns))
                        ->values(implode(',', $agvalues));
                    // Set the query using our newly populated query object and execute it.
                    $db->setQuery($agquery);
                    $db->execute();
            }

               

            //custom viral end

            if(count($photos) > 1){
                $ordering = 0;
                foreach ($photos as $photo)
                {
                    $photo = (array)$photo;
                    $data = array();
                    
                    //echo '<pre>';print_r($photo);echo '</pre>';
                    $elemI = 0;
                    foreach ($photo as $key => $value) {
                        //var_dump($value);
                        //$data[] = $value;
                        $elemI++;
                        $title = '';
                        $file_ext = '';
                        $path = '';
                        $fname = '';
                        if($elemI == 5){
                            //echo '<pre>';var_dump(basename($value, ".").PHP_EOL);echo '</pre>';
                            $filenames = explode('.', basename($value, ".").PHP_EOL);
                            $fileI = 0;
                            foreach ($filenames as $filename) {
                                $fileI++;
                                if($fileI == count($filenames)){
                                    $type = trim('.'.$filename);
                                } else {
                                    $fname .= $filename; 
                                } 
                                
                            }

                            $slashes = explode('/', $value);
                            $slashI = 0;
                            foreach ($slashes as $slash) {
                                $slashI++;
                                if($slashI < count($slashes)){
                                    $path .= $slash.'/';    
                                } 
                                
                            }

                            //var_dump($fname);var_dump($type);var_dump($path);var_dump($value);
                        } else if($elemI == 6){
                            $title = $value;
                            //var_dump($value); 
                        }

                        //var_dump($fname);var_dump($type);var_dump($path);var_dump($value);
                        //var_dump($value);
                        //echo '<br>';
                        
                        if(!empty($fname) && !empty($type) && !empty($path)){

                            $imgquery = $db->getQuery(true);
                            $imgcolumns = array('propid', 'title', 'fname', 'type', 'remote', 'path', 'owner', 'ordering', 'state');
                            $imgvalues = array($db->quote($propId), $db->quote($title), $db->quote($fname), $db->quote($type), 1, $db->quote($path), 785, $db->quote($ordering), 1);
                            $imgquery
                                ->insert($db->quoteName('#__iproperty_images'))
                                ->columns($db->quoteName($imgcolumns))
                                ->values(implode(',', $imgvalues));
                             
                            // Set the query using our newly populated query object and execute it.
                            $db->setQuery($imgquery);
                            $db->execute(); 
                            //break;  
                        }

                    }

                    $ordering++;

                    /*$listing = $data[1];
                    $number = $data[2];

                    echo "<pre>";print_r($listing);
                    if ($data[4]) {
                            file_put_contents("image-{$listing}-{$number}.jpg", $data[4]);
                    }
                    else {
                            echo "here in else";
                    }*/
                }
            }

            //exit;

            $count++;
            //break;
            //echo "</table><br/>#######################################################################################<br/>";
        }

        if($count > 1){
            $message =  $count.' Properties Fetched Successfully';
        } else {
            $message =  $count.' Property Fetched Successfully';
        }

        $application = JFactory::getApplication();
        $application->enqueueMessage($message);

        return true;
    }

    public function deleteRetsRecords(){

        $db = JFactory::getDbo(); 

        $selectquery = $db->getQuery(true);
        $selectquery->select('id');
        $selectquery->from($db->quoteName('#__iproperty'));
        $selectquery->where($db->quoteName('from_rets') . ' = '. 1);
        $db->setQuery($selectquery);
        $selectresults = $db->loadObjectList();

        $selectIds = array();
        foreach ($selectresults as $sresult) {
            array_push($selectIds, $sresult->id);
        }

        if(count($selectIds) > 0){

            $selectIdsForWhere = implode(',', $selectIds);

            $delete_prop = $db->getQuery(true);
            $db->setQuery('DELETE FROM `#__iproperty` WHERE `id` IN ('.$selectIdsForWhere.')');
            $db->execute();
            
            $delete_propmid = $db->getQuery(true);
            $db->setQuery('DELETE FROM `#__iproperty_propmid` WHERE `prop_id` IN ('.$selectIdsForWhere.')');
            $db->execute();

            $delete_propmid = $db->getQuery(true);
            $db->setQuery('DELETE FROM `#__iproperty_images` WHERE `propid` IN ('.$selectIdsForWhere.')');
            $db->execute();

            $delete_propmid = $db->getQuery(true);
            $db->setQuery('DELETE FROM `#__iproperty_agentmid` WHERE `prop_id` IN ('.$selectIdsForWhere.')');
            $db->execute();

        }

        $count = count($selectIds);
        if($count < 1){
            $message =  'No Properties to Delete';
        } else if(count($selectIds) > 1){
            $message =  $count.' Properties Deleted Successfully';
        } else {
            $message =  $count.' Property Deleted Successfully';
        }

        $application = JFactory::getApplication();
        $application->enqueueMessage($message);

        return true;
    }
}
?>